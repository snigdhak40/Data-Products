this_mment <- update(this_moment, hours = 0, minutes = 45, seconds = 20)
this_moment <- update(this_moment, hours = 0, minutes = 45, seconds = 20)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 00)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
info()
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <-  this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <-  this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
moment <-  this_moment <- update(this_moment, hours = 10, minutes = 16)
this_moment <-  this_moment <- update(this_moment, hours = 10, minutes = 16)
this_mment
this_moment
this_moment <- update(this_moment, hours = 10, minutes = 16)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <-update(hours = 10, minutes = 16, seconds = 0)
this_moment <-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment<-update(this_moment,hours = 10,minutes = 16,seconds = 00)
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 00)
info()
skip()
skip()
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
bye()
swirl()
bye()
swirl()
bye()
bye()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
? new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stpwatch()
stopwatch()
q()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
library(ggplot2)
data(mtcars)
mtcars[1:3, ]
dim(mtcars)
mtcars[1:32, ]
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$cyl
mtcars$vs <- as.factor(mtcars$vs)
mtcars$vs
mtcars$am <- factor(mtcars$am)
mtcars$am
mtcars$gear <- factor(mtcars$gear)
mtcars$gear
mtcars$carb <- factor(mtcars$carb)
attach(mtcars)
mtcars
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
attach(mtcars)
result <- t.test(mpg ~ am)
result
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel)
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel)
amModel<-lm(mpg ~ am, data=mtcars)
summary(amModel)
anova(amModel, stepModel, fullModel, amIntWtModel)
confint(amIntWtModel)
summary(amIntWtModel)$coef
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
pairs(mtcars, panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
par(mfrow = c(2, 2))
plot(amIntWtModel)
library(knitr)
instal.packages("knitr")
install.packages("knitr")
library(knitr)
pandoc("https://github.com/snigdhak40/Coursera-Regression-Models/blob/master/report.md", format = 'latex' )
getwd()
pandoc("https://github.com/snigdhak40/Coursera-Regression-Models/blob/master/report.md", format = 'latex' )
pandoc("https://github.com/snigdhak40/Coursera-Regression-Models/blob/master/report.md", format = 'latex' )
pandoc
pandoc??
---
data_full <- read.csv("household_power_consumption.txt", header = T, sep = ';',
na.strings = "?", nrows = 2075259, check.names = F,
stringsAsFactors = F, comment.char = "", quote = '\"')
data_full$Date <- as.Date(data_full$Date, format = "%d/%m/%Y")
## Subsetting the data
data <- subset(data_full, subset = (Date >= "2007-02-01" & Date <= "2007-02-02"))
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting1\\plot4.R")
q()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
years <- c("1999", "2002", "2005", "2008")
means <- ()
means <- vector()
for ( i in years ) { means[i] <- mean(NEI$Emissions[which(NEI$year == i)], na.rm = TRUE) }
barplot(means,col = rainbow(20, start = 0, end = 1),main = "Mean PM_2.5 emissions (Tons)")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
years <- c("1999", "2002", "2005", "2008")
average <- vector()
for ( i in years ) { average[i] <- mean(NEI$Emissions[which(NEI$year == i)], na.rm = TRUE) }
barplot(averages,col = rainbow(20, start = 0, end = 1),main = "Average PM_2.5 emissions (Tons)")
barplot(average,col = rainbow(20, start = 0, end = 1),main = "Average PM_2.5 emissions (Tons)")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
years <- c("1999", "2002", "2005", "2008")
average <- vector()
for ( i in years ) { average[i] <- mean(NEI$Emissions[which(NEI$year == i)], na.rm = TRUE) }
barplot(average,col = rainbow(20, start = 0, end = 1),main = "Average PM_2.5 emissions (Tons)")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot1.R")
total <- vector()
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot2.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot2.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot2.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot2.R")
for ( i in years ) { total[i] <- total(NEI$Emissions[which(NEI$year == i)], na.rm = TRUE) }
g2 <- ggplot(data.baltimore, aes(year, Emissions))
require("ggplot2")
g2 <- ggplot(data.baltimore, aes(year, Emissions))
data.baltimore <- NEI[which((NEI$fips == "24510") & (NEI$Emissions < 1000)),
]
data.baltimore
g2 + geom_point(aes(color = type), size = 10, alpha = 0.3) + facet_grid(. ~
type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
se = FALSE)
g2 <- ggplot(data.baltimore, aes(year, Emissions))
g2
g2 + geom_point(aes(color = type), size = 10, alpha = 0.3) + facet_grid(. ~
type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
se = FALSE)
g2 + geom_point(aes(color = type), size = 10, alpha = 0.3) + facet_grid(. ~
+     type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
+     type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
quit
g2 + geom_point(aes(color = type), size = 10, alpha = 0.3) + facet_grid(. ~
+     type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
+     se = FALSE)
g2
g2 + geom_point(aes(color = type), size = 10, alpha = 0.3) + facet_grid(. ~
type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
quit
g2 + geom_point(aes(color = type), size = 10, alpha = 0.3) + facet_grid(. ~
type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
se = FALSE)
require("ggplot2")
g2
g2 + geom_point(aes(color = type), size = 5, alpha = 0.4 + facet_grid(. ~type + geom_smooth(size = 2, color = "black", linetype = 2, method = "lm", se = FALSE )
)
)
g2 + geom_point(aes(color = type), size = 5, alpha = 0.4 + facet_grid(. ~type + geom_smooth(size = 1g2 + geom_point(aes(color = type), size = 5, alpha = 0.4 + facet_grid(. ~type + geom_smooth(size = g2 + geom_point(aes(color = type), size = 10, alpha = 0.3) + facet_grid(. ~
type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
se = FALSE)
g2 + geom_point(aes(color = type), size = 10, alpha = 0.3) + facet_grid(. ~
type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
se = FALSE)
g2 + geom_point(aes(color = type), size = 10, alpha = 0.3) + facet_grid(. ~
type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
quit
q()
g2 + geom_point(aes(color = type), size = 5, alpha = 0.4) + facet_grid(. ~type) + geom_smooth(size = 2, color = "black", linetype = 2, method = "lm",type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
se = FALSE)
g2 + geom_point(aes(color = type), size = 5, alpha = 0.4) + facet_grid(. ~type) + geom_smooth(size = 2, color = "black", linetype = 2, method = "lm",type) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
+     se = FALSE)
g2 + geom_point(aes(color = type), size = 5, alpha = 0.4) + facet_grid(. ~type) + geom_smooth(size = 2, color = "black", linetype = 2, method = "lm",se = FALSE)
g2 + geom_point(aes(color = type), size = 10,alpha = 0.4) + facet_grid(. ~type) + geom_smooth(size = 2, color = "black", linetype = 2, method = "lm",se = FALSE)
g2 + geom_point(aes(color = type), size = 10,alpha = 0.4) + facet_grid(. ~type) + geom_smooth(size = 2, color = "black", linetype = 2, method = "lm",se = FALSE)
g2 + geom_point(aes(color = type), size = 10,alpha = 0.4) + facet_grid(. ~type) + geom_smooth(size = 1, color = "black", linetype = 2, method = "lm",se = FALSE)
g2 + geom_point(aes(color = type), size = 10,alpha = 0.4) + facet_grid(. ~type) + geom_smooth(size = 1, color = "black", linetype = 1,  method = "lm",se = FALSE)
q()
# creating plot data:
d.tmp1 <- NEI[NEI$SCC %in% SCC[grep("Coal", SCC$EI.Sector), 1], ]
d.tmp1 <- NEI[NEI$SCC %in% SCC[grep("Coal", SCC$EI.Sector), 1], ]
names(NEI$SCC)
NEI$SCC
grep(NEI$SCC)
grep(NEI$EI)
SCC$EI
SCC$EI.Sector
grep("Chemical Manuf", SCC$EI.Sector)
grep("Coal", , SCC$EI.Sector)
grep("Coal", SCC$EI.Sector)
NEI$SCC %in% SCC[grep("Coal", SCC$EI.Sector)
,1]
NEI[NEI$SCC %in% SCC[grep("Coal", SCC$EI.Sector), 1], ]
d.tmp1 <- NEI[NEI$SCC %in% SCC[grep("Coal", SCC$EI.Sector), 1], ]
d.tmp2 <- SCC[, c(1, 4)]
d.tmp2
data.coal <- merge(d.tmp1, d.tmp2, by.x = "SCC", by.y = "SCC")[, c(4, 6, 7)]
data.coal
require("ggplot2")
g4 <- ggplot(data.coal, aes(x = year, y = Emissions))
g4
g4 + geom_point(aes(color = EI.Sector), size = 10, alpha = 0.3) + facet_grid(. ~
EI.Sector) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
se = FALSE)
g4 <- ggplot(data.coal, aes(x = Year, y = Coal Emissions))
g4 <- ggplot(data.coal, aes(x = Year, y = Emissions(Coal)))
g4 + geom_point(aes(color = EI.Sector), size = 10, alpha = 0.3) + facet_grid(. ~
+     EI.Sector) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
+     se = FALSE)
g4 + geom_point(aes(color = EI.Sector), size = 10, alpha = 0.3) + facet_grid(. ~
+     EI.Sector) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm", se = FALSE)
g4 + geom_point(aes(color = EI.Sector), size = 10, alpha = 0.3) + facet_grid(. ~
EI.Sector) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
se = FALSE)
g4 <- ggplot(data.coal, aes(x = year, y = Emissions))
g4 + geom_point(aes(color = EI.Sector), size = 10, alpha = 0.3) + facet_grid(. ~
+     EI.Sector) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
+     se = FALSE)
g4 + geom_point(aes(color = EI.Sector), size = 10, alpha = 0.3) + facet_grid(. ~ EI.Sector) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",se = FALSE)
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot4.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot4.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot4.R")
# creating plot data
data.coal1 <- NEI[NEI$SCC %in% SCC[grep("Coal", SCC$EI.Sector), 1], ]
data.coalscc <- SCC[, c(1, 4)]
# plot coal data
data.coal <- merge(data.coal1, data.coalscc, by.x = "SCC", by.y = "SCC")[, c(4, 6, 7)]
require("ggplot2")
g4 <- ggplot(data.coal, aes(x = year, y = Emissions)) + geom_point(aes(color = EI.Sector), size = 10, alpha = 0.3) + facet_grid(. ~
EI.Sector) + geom_smooth(size = 2, color = "black", linetype = 1, method = "lm",
se = FALSE)
plot(g4)
data.Mobile <- NEI[NEI$SCC %in% SCC[grep("Mobile", SCC$EI.Sector), 1], ]
data.BaltimoreMobile <- data.Mobile[which(data.Mobile$fips == "24510"), ]
data.BaltimoreMobile
data.SCC<- SCC[, c(1, 4)]
d5 <- merge(data.BaltimoreMobile, data.SCC, by.x = "SCC", by.y = "SCC")[, c(4, 6, 7)]
# removing outliers and sources out of our interest:
d5[d5$Emissions > 15, ] <- NA
d5 <- d5[which(d5$EI.Sector != "Mobile - Commercial Marine Vessels"), ]
d5 <- d5[which(d5$EI.Sector != "Mobile - Aircraft"), ]
require("lattice")
xyplot(Emissions ~ year | EI.Sector, d5, layout = c(4, 2), ylab = "Emissions",
xlab = "years", panel = function(x, y) {
panel.xyplot(x, y)
panel.lmline(x, y, lty = 1, col = "red")
par.strip.text = list(cex = 0.8)
}, as.table = T)
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot5.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot5.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot5.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot5.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot5.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot5.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot5.R")
install.packages("lattice")
library(lattice)
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot5.R")
data.Mobile <- NEI[NEI$SCC %in% SCC[grep("Mobile",SCC$EI.Sector),1],]
data.BaltimoreMobile <- data.Mobile[which(data.Mobile$fips == "24510"),]
data.SCC<- SCC[, c(1, 4)]
data.final <- merge(data.BaltimoreMobile, data.SCC, by.x = "SCC", by.y = "SCC")[, c(4, 6, 7)]
# remove outliers
data.final[data.final$Emissions > 15, ] <- NA
data.final<-data.final[which(data.final$EI.Sector != "Mobile - Commercial Marine Vessels"), ]
data.final<-data.final[which(data.final$EI.Sector != "Mobile - Aircraft"), ]
# Plot xy with Lattice
require("lattice")
xyplot(Emissions ~ year | EI.Sector, data.final, layout = c(4, 2), ylab = "Emissions", xlab = "years", panel = function(x, y) { panel.xyplot(x, y) }, as.table = T)
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot5.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot5.R")
panel.lmline(x, y, lty = 1, col = "red")
plot(xyplot(Emissions ~ year | EI.Sector, data.final, layout = c(4, 2), ylab = "Emissions", xlab = "years", panel = function(x, y) { panel.xyplot(x, y) panel.lmline(x, y, lty = 1, col = "red") }, as.table = T))
xyplot(Emissions ~ year | EI.Sector, d5, layout = c(4, 2), ylab = "Emissions",
xlab = "years", panel = function(x, y) {
panel.xyplot(x, y)
panel.lmline(x, y, lty = 1, col = "red")
par.strip.text = list(cex = 0.8)
}, as.table = T)
data,final
data.final
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot5.R")
source("C:\\Users\\rkanadib\\Documents\\Snigdha's folder\\ExData_Plotting2\\plot5.R")
q()
stormfile <- tempfile()
stormdata <- read.csv(bzfile(stormfile), stringsAsFactors = FALSE)
stormdata <- read.csv(bzfile(stormfile), stringsAsFactors = FALSE)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", stormfile)
stormdata$BGN_DATE <- as.Date(stormdata$BGN_DATE, format = "%m/%d/%Y %H:%M:%S")
stormdata <- read.csv(bzfile(stormfile), stringsAsFactors = FALSE)
stormdata$BGN_DATE <- as.Date(stormdata$BGN_DATE, format = "%m/%d/%Y %H:%M:%S")
stormdata <- data[stormdata$BGN_DATE >= as.Date("1991-01-01"), ]
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
stormdata$EVTYPE <- toupper(stormdata$EVTYPE)
head(stormdata,100)
sumhealth <- ddply(stormdata, .(EVTYPE), summarise, fatalities = sum(FATALITIES),
injuries = sum(INJURIES))
library(ggplot2)
library(plyr)
library(reshape2)
sumhealth <- ddply(stormdata, .(EVTYPE), summarise, fatalities = sum(FATALITIES),
injuries = sum(INJURIES))
head(stormdata$EVTYPE,100)
library(ggplot2)
library(plyr)
library(reshape2)
stormfile <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", stormfile)
stormdata <- read.csv(bzfile(stormfile), stringsAsFactors = FALSE)
stormdata$BGN_DATE <- as.Date(stormdata$BGN_DATE, format = "%m/%d/%Y %H:%M:%S")
stormdata$EVTYPE
stormdata <- data[stormdata$BGN_DATE >= as.Date("1991-01-01"), ]
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
stormdata$EVTYPE
stormdata <- read.csv(bzfile(stormfile), stringsAsFactors = FALSE)
stormdata$BGN_DATE <- as.Date(stormdata$BGN_DATE, format = "%m/%d/%Y %H:%M:%S")
stormdata <- stormdata[stormdata$BGN_DATE >= as.Date("1991-01-01"), ]
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
stormdata$EVTYPE <- toupper(stormdata$EVTYPE)
stormdata$EVTYPE <- trim(stormdata$EVTYPE)
sumhealth <- ddply(stormdata, .(EVTYPE), summarise, fatalities = sum(FATALITIES),
injuries = sum(INJURIES))
```
sumhealth <- ddply(stormdata, .(EVTYPE), summarise, fatalities = sum(FATALITIES), injuries = sum(INJURIES))
sumhealth
suminjfat <- ddply(stormdata, .(EVTYPE), summarise, fatalities = sum(FATALITIES), injuries = sum(INJURIES))
suminjfat
stormdata$EVTYPE <- toupper(stormdata$EVTYPE)
stormdata$EVTYPE <- trim(stormdata$EVTYPE)
suminjfat <- ddply(stormdata, .(EVTYPE), summarise, fatalities = sum(FATALITIES), injuries = sum(INJURIES))
suminjfat
topfatalities <- head(suminjfat[order(suminjfat$fatalities, decreasing = T), ], n = 10)[, c(1, 2)]
topinjuries <- head(suminjfat[order(suminjfat$injuries, decreasing = T), ], n = 10)[, c(1, 3)]
topfatalities
topinjurie
topinjuries
mosteventfatalities <- head(suminjfat[order(suminjfat$fatalities, decreasing = T), ], n = 10)[, c(1, 2)]
```
```{r}
mosteventinjuries <- head(suminjfat[order(suminjfat$injuries, decreasing = T), ], n = 10)[, c(1, 3)]
```
suminjfat
mosteventfatalities <- head(suminjfat[order(suminjfat$fatalities, decreasing = T), ], n = 10)[, c(1, 2)]
mosteventfatalities
mosteventinjuries <- head(suminjfat[order(suminjfat$injuries, decreasing = T), ], n = 10)[, c(1, 3)]
mosteventinjuries
mosteventinjuries <- head(suminjfat[order(suminjfat$injuries, decreasing = T), ], n = 10)[, c(1, 3)]
mosteventinjuries
mosteventfatalities
fatalchart <- melt(mosteventfatalities)
```
fatalchart <- melt(mosteventfatalities)
injurychart <- melt(mosteventinjuries)
stormdata$PROPDMGEXP[is.na(stormdata$PROPDMGEXP)] <- 0
stormdata$PROPDMGEXP[stormdata$PROPDMGEXP == ""] <- 1
stormdata$PROPDMGEXP[grep("[-+?]", stormdata$PROPDMGEXP)] <- 1
stormdata$PROPDMGEXP[grep("[Hh]", stormdata$PROPDMGEXP)] <- 100
stormdata$PROPDMGEXP[grep("[Kk]", stormdata$PROPDMGEXP)] <- 1000
stormdata$PROPDMGEXP[grep("[Mm]", stormdata$PROPDMGEXP)] <- 1e+06
stormdata$PROPDMGEXP[grep("[Bb]", stormdata$PROPDMGEXP)] <- 1e+09
stormdata$PROPDMGEXP <- as.numeric(stormdata$PROPDMGEXP)
stormdata$PROPDMG <- stormdata$PROPDMGEXP * stormdata$PROPDMG
stormdata$PROPDMG
stormdata$CROPDMGEXP[is.na(stormdata$CROPDMGEXP)] <- 0
stormdata$CROPDMGEXP[stormdata$CROPDMGEXP == ""] <- 1
stormdata$CROPDMGEXP[grep("[-+?]", stormdata$CROPDMGEXP)] <- 1
stormdata$CROPDMGEXP[grep("[Hh]", stormdata$CROPDMGEXP)] <- 100
stormdata$CROPDMGEXP[grep("[Kk]", stormdata$CROPDMGEXP)] <- 1000
stormdata$CROPDMGEXP[grep("[Mm]", stormdata$CROPDMGEXP)] <- 1e+06
stormdata$CROPDMGEXP[grep("[Bb]", stormdata$CROPDMGEXP)] <- 1e+09
stormdata$CROPDMGEXP <- as.numeric(stormdata$CROPDMGEXP)
stormdata$CROPDMG <- stormdata$CROPDMGEXP * stormdata$CROPDMG
sumecondmg <- ddply(stormdata, .(EVTYPE), summarise, cropdmg = sum(CROPDMG), propdmg = sum(PROPDMG))
sumecondmg$totaldamage <- sumecondmg$cropdmg + sumecondmg$propdmg
## Select top 10
toptenecondmg <- head(sumecondmg[order(sumecondmg$totaldamage, decreasing = T), ], n = 10)
## Prepare data for the barchart
forchart3 <- melt(toptenecondmg)
econdmgchart <- melt(toptenecondmg)
sumecondmg <- ddply(stormdata, .(EVTYPE), summarise, cropdmg = sum(CROPDMG), propdmg = sum(PROPDMG))
sumecondmg$totaldamage <- sumecondmg$cropdmg + sumecondmg$propdmg
```
## Select top 10
```{r}
toptenecondmg <- head(sumecondmg[order(sumecondmg$totaldamage, decreasing = T), ], n = 10)
```
## Data for economic damage barchart
```{r}
econdmgchart <- melt(toptenecondmg)
```
econdmgchart <- econdmgchart[econdmgchart$variable != "TotalDamage", ]
econdmgchart <- econdmgchart[econdmgchart$variable != "totaldamage", ]
ggplot(forchart, aes(x = factor(fatalchart$EVTYPE), y = fatalchart$value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") + theme(axis.text.x = element_text(angle = -270),
plot.title = element_text(face = "bold")) + labs(x = "Weather event", y = "Number of injuries") +
theme(legend.position = "none") + ggtitle("Fatalities")
ggplot(fatalchart, aes(x = factor(fatalchart$EVTYPE), y = fatalchart$value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") + theme(axis.text.x = element_text(angle = -270),
plot.title = element_text(face = "bold")) + labs(x = "Weather event", y = "Number of injuries") +
theme(legend.position = "none") + ggtitle("Fatalities")
ggplot(injurychart, aes(x = factor(injurychart$EVTYPE), y = injurychart$value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") + theme(axis.text.x = element_text(angle = -270),
plot.title = element_text(face = "bold")) + labs(x = "Weather event", y = "Number of injuries") +
theme(legend.position = "none") + ggtitle("Injuries")
ggplot(econdmgchart, aes(x = factor(econdmgchart$EVTYPE), y = econdmgchart$value, fill = variable)) +
geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = -270),
plot.title = element_text(face = "bold")) + labs(x = "Weather event", y = "Economic damage") +
scale_fill_discrete(name = "Type of damage", labels = c("Crop", "Property")) +
theme(legend.position = "top") + ggtitle("Economic impact")
source('~/.active-rstudio-document', echo=TRUE)
```{r echo = TRUE }
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
data(mtcars)
mtcars[1:3, ]
s
dim(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
attach(mtcars)
result <- t.test(mpg ~ am)
result$p.value
result$estimate
fullModel <- lm(mpg ~ ., data=mtcars
summary(fullModel)
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel)
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel)
amModel<-lm(mpg ~ am, data=mtcars)
summary(amModel)
anova(amModel, stepModel, fullModel, amIntWtModel)
confint(amIntWtModel)
summary(amIntWtModel)$coef
sum((abs(dfbetas(amIntWtModel)))>1)
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
pairs(mtcars, panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
par(mfrow = c(2, 2))
plot(amIntWtModel)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
pairs(mtcars, panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
install.packages("pandoc")
q()
library(shiny)
library(shiny)
getwd()
setwd("C:/Users/rkanadib/Documents/GitHub/Developing-Data-Products/Coursera-Developing-Data-Products/project/")
getwd()
runApp("shinyapps")
runApp("shinyapps")
runApp("shinyapps")
